{
    "swagger": "2.0",
    "host": "127.0.0.1:8090",
    "info": {
        "version": "2.0",
        "title": "Cardano Wallet API",
        "license": {
            "url": "http://mit.com",
            "name": "MIT"
        },
        "description": "This is the specification for the Cardano Wallet API, automatically generated\nas a [Swagger](https://swagger.io/) spec from the [Servant](http://haskell-servant.readthedocs.io/en/stable/) API\nof [Cardano](https://github.com/input-output-hk/cardano-sl).\n\nGit revision: **133d97f6ecd32139ad4104e9f1ed5d7ceff71527**\nSoftware version: **cardano-sl:0**\n\n\n## Request format (all versions)\n\nIssuing requests against this API is conceptually not very different from any other web service out there. The API\nis **versioned**, meaning that is possible to access different versions of the API by adding the _version number_\nin the URL.\n\n**For the sake of backward compatibility, we expose the legacy version of the API, available simply as\nunversioned endpoints.**\n\nThis means that _omitting_ the version number would call the old version of the API. Examples:\n\n```\n/api/version\n```\n\nCompatibility between major versions is not _guaranteed_, i.e. the request & response formats might differ.\n\n## Response format (V1 onwards)\n\n**All GET requests of the API are paginated by default**. Whilst this can be a source of surprise, is\nthe best way of ensuring the performance of GET requests is not affected by the size of the data storage.\n\nVersion `V1` introduced a different way of requesting information to the API. In particular, GET requests\nwhich returns a _collection_ (i.e. typically a JSON array of resources) lists extra parameters which can be\nused to modify the shape of the response. In particular, those are:\n\n* `page`: (Default value: **1**).\n* `per_page`: (Default value: **10**)\n\nFor a more accurate description, see the section `Parameters` of each GET request, but as a brief overview\nthe first two control how many results and which results to access in a paginated request.\n\nThis is an example of a typical (successful) response from the API:\n\n``` json\n{\n    \"status\": \"success\",\n    \"data\": [\n        {\n            \"amount\": 29208924123228353,\n            \"addresses\": [\n                \"5FCjkr138i9qs2EEjvmXF37aSLiZdwQsALPMmvVDgx8PQ31nJTh9p35ZfnDFn6hfWdyY6XuFQXY23kfUjSuwBSEd4912knFgJSSZSBCt2yo\"\n            ],\n            \"name\": \"My account\",\n            \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n            \"index\": 1\n        },\n        {\n            \"amount\": 28089727180413548,\n            \"addresses\": [\n                \"7J1MaQmKydNUyekmvgR3VNZLeLYkTNpDTKz4Z5SHfnJxDVgCN3tjixySxMNKNULKaV5XBBngc1e5BNzrePahs1Tuo7xcnKUyvkUm8HNcHuufC5q\",\n                \"7fiTbReGezWKbx8zhrjdMekrd8kziXqofdzzGPHWKgRXd24pDM7TZSFfnarpCsHy67ZW3AgFRAfFEGuRSd1VSYP5dDyNJJLwKB29vxsFnGq9GPB8x2RittGrrjNXPpgB8b4Y3yBFbpcXeDF7FG13u5gFHrcXwU86MN2CaCpLaaynjRvnitwGnd\"\n            ],\n            \"name\": \"My account\",\n            \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n            \"index\": 0\n        }\n    ],\n    \"meta\": {\n        \"pagination\": {\n            \"page\": 1,\n            \"perPage\": 46,\n            \"totalPages\": 1,\n            \"totalEntries\": 2\n        }\n    }\n}\n```\n\n## Filtering and sorting\n\n`GET` endpoints which list collection of resources supports filters & sort operations, which are clearly marked\nin the swagger docs with the `FILTER` or `SORT` labels. The query format is quite simple, and it goes this way:\n\n### Filter operators\n\n| Operator | Description                                                               | Example                |\n|----------|---------------------------------------------------------------------------|------------------------|\n| -        | If **no operator** is passed, this is equivalent to `EQ` (see below).     | `balance=10`           |\n| `EQ`     | Retrieves the resources with index _equal to the one provided.            | `balance=EQ[10]`       |\n| `LT`     | Retrieves the resources with index _less than_ the one provided.          | `balance=LT[10]`       |\n| `LTE`    | Retrieves the resources with index _less than equal_ the one provided.    | `balance=LTE[10]`      |\n| `GT`     | Retrieves the resources with index _greater than_ the one provided.       | `balance=GT[10]`       |\n| `GTE`    | Retrieves the resources with index _greater than equal_ the one provided. | `balance=GTE[10]`      |\n| `RANGE`  | Retrieves the resources with index _within the inclusive range_ [k,k].    | `balance=RANGE[10,20]` |\n\n### Sort operators\n\n| Operator | Description                                                               | Example                |\n|----------|---------------------------------------------------------------------------|------------------------|\n| `ASC`    | Sorts the resources with the given index in _ascending_ order.            | `sort_by=ASC[balance]` |\n| `DES`    | Sorts the resources with the given index in _descending_ order.           | `sort_by=DES[balance]` |\n| -        | If **no operator** is passed, this is equivalent to `DES` (see above).    | `sort_by=balance`      |\n\n## Dealing with errors (V1 onwards)\n\nIn case a request cannot be served by the API, a non-2xx HTTP response will be issue, together with a\n[JSend-compliant](https://labs.omniti.com/labs/jsend) JSON Object describing the error in detail together\nwith a numeric error code which can be used by API consumers to implement proper error handling in their\napplication. For example, here's a typical error which might be issued:\n\n``` json\n{\n    \"status\": \"error\",\n    \"diagnostic\": {},\n    \"message\": \"WalletNotFound\"\n}\n```\n\n### Existing wallet errors\n\nError Name | HTTP Error code | Example\n-----------|-----------------|---------\n`NotEnoughMoney`|403|{\"status\":\"error\",\"diagnostic\":{\"needMore\":1400},\"message\":\"NotEnoughMoney\"}\n`OutputIsRedeem`|403|{\"status\":\"error\",\"diagnostic\":{\"address\":\"b10b24203f1f0cadffcfd16277125cf7f3ad598983bef9123be80d93\"},\"message\":\"OutputIsRedeem\"}\n`SomeOtherError`|418|{\"status\":\"error\",\"diagnostic\":{\"foo\":\"foo\",\"bar\":14},\"message\":\"SomeOtherError\"}\n`MigrationFailed`|422|{\"status\":\"error\",\"diagnostic\":{\"description\":\"migration\"},\"message\":\"MigrationFailed\"}\n`JSONValidationFailed`|400|{\"status\":\"error\",\"diagnostic\":{\"validationError\":\"Expected String, found Null.\"},\"message\":\"JSONValidationFailed\"}\n`WalletNotFound`|404|{\"status\":\"error\",\"diagnostic\":{},\"message\":\"WalletNotFound\"}\n"
    },
    "definitions": {
        "TransactionType": {
            "type": "string",
            "enum": [
                "local",
                "foreign"
            ]
        },
        "CPtxCondition": {
            "type": "string",
            "enum": [
                "CPtxCreating",
                "CPtxApplying",
                "CPtxInBlocks",
                "CPtxWontApply",
                "CPtxNotTracked"
            ]
        },
        "WalletResponse<[Transaction]>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "items": {
                        "$ref": "#/definitions/Transaction"
                    },
                    "type": "array"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "V1Coin": {
            "maximum": 45000000000000000,
            "type": "number"
        },
        "AddressValidity": {
            "required": [
                "valid"
            ],
            "type": "object",
            "properties": {
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "V1BackupPhrase": {
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "PendingTxsSummary": {
            "type": "string"
        },
        "CUpdateInfo": {
            "required": [
                "cuiSoftwareVersion",
                "cuiBlockVesion",
                "cuiScriptVersion",
                "cuiImplicit",
                "cuiVotesFor",
                "cuiVotesAgainst",
                "cuiPositiveStake",
                "cuiNegativeStake"
            ],
            "type": "object",
            "properties": {
                "cuiNegativeStake": {
                    "$ref": "#/definitions/CCoin"
                },
                "cuiVotesFor": {
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "type": "integer"
                },
                "cuiSoftwareVersion": {
                    "$ref": "#/definitions/SoftwareVersion"
                },
                "cuiImplicit": {
                    "type": "boolean"
                },
                "cuiVotesAgainst": {
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "type": "integer"
                },
                "cuiPositiveStake": {
                    "$ref": "#/definitions/CCoin"
                },
                "cuiScriptVersion": {
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                },
                "cuiBlockVesion": {
                    "$ref": "#/definitions/BlockVersion"
                }
            }
        },
        "ResponseStatus": {
            "type": "string",
            "enum": [
                "success",
                "fail",
                "error"
            ]
        },
        "WalletResponse<WalletAddress>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "$ref": "#/definitions/WalletAddress"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "Wallet": {
            "required": [
                "id",
                "name",
                "balance"
            ],
            "type": "object",
            "properties": {
                "balance": {
                    "maximum": 45000000000000000,
                    "type": "number",
                    "description": "Current balance, in ADA"
                },
                "name": {
                    "type": "string",
                    "description": "Wallet's name"
                },
                "id": {
                    "type": "string",
                    "description": "Unique wallet identifier"
                }
            }
        },
        "WalletResponse<[Wallet]>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "items": {
                        "$ref": "#/definitions/Wallet"
                    },
                    "type": "array"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "WalletResponse<Account>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "$ref": "#/definitions/Account"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "CAccount": {
            "required": [
                "caId",
                "caMeta",
                "caAddresses",
                "caAmount"
            ],
            "type": "object",
            "properties": {
                "caAddresses": {
                    "items": {
                        "$ref": "#/definitions/CAddress"
                    },
                    "type": "array"
                },
                "caMeta": {
                    "$ref": "#/definitions/CAccountMeta"
                },
                "caId": {
                    "$ref": "#/definitions/CAccountId"
                },
                "caAmount": {
                    "$ref": "#/definitions/CCoin"
                }
            }
        },
        "WalletResponse<Transaction>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "$ref": "#/definitions/Transaction"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "NewAddress": {
            "required": [
                "accountIndex",
                "walletId"
            ],
            "type": "object",
            "properties": {
                "accountIndex": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "integer",
                    "description": "Target account's index to store this address in"
                },
                "walletId": {
                    "type": "string",
                    "description": "Corresponding wallet identifier"
                },
                "spendingPassword": {
                    "pattern": "abcd",
                    "type": "string",
                    "description": "Optional spending password to unlock funds"
                }
            }
        },
        "CTxMeta": {
            "required": [
                "ctmDate"
            ],
            "type": "object",
            "properties": {
                "ctmDate": {
                    "type": "integer"
                }
            }
        },
        "WalletResponse<WalletStateSnapshot>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "$ref": "#/definitions/WalletStateSnapshot"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "V1SoftwareVersion": {
            "required": [
                "applicationName",
                "version"
            ],
            "type": "object",
            "properties": {
                "version": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "integer"
                },
                "applicationName": {
                    "type": "string"
                }
            }
        },
        "ApiVersion": {
            "type": "string",
            "enum": [
                "ApiVersion0"
            ]
        },
        "Payment": {
            "required": [
                "source",
                "destinations"
            ],
            "type": "object",
            "properties": {
                "groupingPolicy": {
                    "type": "string",
                    "enum": [
                        "OptimizeForSecurity",
                        "OptimizeForHighThroughput"
                    ],
                    "description": "Optional strategy to use for selecting the transaction inputs"
                },
                "destinations": {
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/PaymentDistribution"
                    },
                    "type": "array",
                    "description": "One or more destinations for the payment"
                },
                "source": {
                    "required": [
                        "walletId",
                        "accountIndex"
                    ],
                    "type": "object",
                    "description": "Source for the payment",
                    "properties": {
                        "accountIndex": {
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer",
                            "description": "Corresponding account's index on the wallet"
                        },
                        "walletId": {
                            "type": "string",
                            "description": "Target wallet identifier to reach"
                        }
                    }
                },
                "spendingPassword": {
                    "pattern": "abcd",
                    "type": "string",
                    "description": "Optional spending password to access funds"
                }
            }
        },
        "CTxId": {
            "type": "string"
        },
        "NodeSettings": {
            "required": [
                "slotDuration",
                "softwareInfo",
                "projectVersion",
                "gitRevision"
            ],
            "type": "object",
            "properties": {
                "projectVersion": {
                    "type": "string",
                    "description": "Current project's version"
                },
                "gitRevision": {
                    "type": "string",
                    "description": "Git revision of this deployment"
                },
                "slotDuration": {
                    "required": [
                        "quantity"
                    ],
                    "type": "object",
                    "description": "Duration of a slot",
                    "properties": {
                        "quantity": {
                            "type": "number"
                        },
                        "unit": {
                            "pattern": "milliseconds",
                            "type": "string"
                        }
                    }
                },
                "softwareInfo": {
                    "required": [
                        "applicationName",
                        "version"
                    ],
                    "type": "object",
                    "description": "Various pieces of information about the current software",
                    "properties": {
                        "version": {
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "applicationName": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "PaymentDistribution": {
            "required": [
                "address",
                "amount"
            ],
            "type": "object",
            "properties": {
                "amount": {
                    "maximum": 45000000000000000,
                    "type": "number",
                    "description": "Amount of coin to bind, in ADA"
                },
                "address": {
                    "type": "string",
                    "description": "Address to map coins to"
                }
            }
        },
        "CAccountInit": {
            "required": [
                "caInitMeta",
                "caInitWId"
            ],
            "type": "object",
            "properties": {
                "caInitWId": {
                    "$ref": "#/definitions/CId"
                },
                "caInitMeta": {
                    "$ref": "#/definitions/CAccountMeta"
                }
            }
        },
        "CProfile": {
            "required": [
                "cpLocale"
            ],
            "type": "object",
            "properties": {
                "cpLocale": {
                    "type": "string"
                }
            }
        },
        "WalletResponse<WalletUpdate>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "$ref": "#/definitions/WalletUpdate"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "FilePath": {
            "example": "keys/1.key",
            "type": "string",
            "description": "Path to file.\n Note that it is represented as JSON-string, one may need to properly escape content. For instance:\n curl ... -X \"\\\\\"1.key\"\\\\\".\nAlso, when on Windows, don't forget to double-escape  backslashes, e.g.  \"C:\\\\\\\\\\\\\\\\keys\\\\\\\\1.key\""
        },
        "BlockchainHeight": {
            "required": [
                "quantity"
            ],
            "type": "object",
            "properties": {
                "quantity": {
                    "maximum": 1.8446744073709551615e19,
                    "minimum": 0,
                    "type": "number"
                },
                "unit": {
                    "pattern": "blocks",
                    "type": "string"
                }
            }
        },
        "WalletResponse<NodeSettings>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "$ref": "#/definitions/NodeSettings"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "CWalletAssurance": {
            "type": "string",
            "enum": [
                "CWAStrict",
                "CWANormal"
            ]
        },
        "V1PassPhrase": {
            "pattern": "abcd",
            "type": "string"
        },
        "Page": {
            "default": 1,
            "minimum": 1,
            "type": "integer"
        },
        "BackupPhrase": {
            "required": [
                "bpToList"
            ],
            "type": "object",
            "properties": {
                "bpToList": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "BlockVersion": {
            "required": [
                "bvMajor",
                "bvMinor",
                "bvAlt"
            ],
            "type": "object",
            "properties": {
                "bvAlt": {
                    "maximum": 255,
                    "minimum": 0,
                    "type": "integer"
                },
                "bvMajor": {
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                },
                "bvMinor": {
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "Address": {
            "type": "string"
        },
        "CWalletInit": {
            "required": [
                "cwInitMeta",
                "cwBackupPhrase"
            ],
            "type": "object",
            "properties": {
                "cwBackupPhrase": {
                    "$ref": "#/definitions/BackupPhrase"
                },
                "cwInitMeta": {
                    "$ref": "#/definitions/CWalletMeta"
                }
            }
        },
        "WalletUpdate": {
            "required": [
                "assuranceLevel",
                "name"
            ],
            "type": "object",
            "properties": {
                "assuranceLevel": {
                    "type": "string",
                    "enum": [
                        "normal",
                        "strict"
                    ],
                    "description": "New assurance level"
                },
                "name": {
                    "type": "string",
                    "description": "New wallet's name"
                }
            }
        },
        "InputSelectionPolicy": {
            "example": {
                "groupingPolicy": "OptimizeForHighThroughput"
            },
            "type": "string",
            "enum": [
                "OptimizeForSecurity",
                "OptimizeForHighThroughput"
            ]
        },
        "WalletAddress": {
            "required": [
                "id",
                "balance",
                "used",
                "changeAddress"
            ],
            "type": "object",
            "properties": {
                "used": {
                    "type": "boolean",
                    "description": "True if this address has been used"
                },
                "changeAddress": {
                    "type": "boolean",
                    "description": "True if this address stores change from a previous transaction"
                },
                "balance": {
                    "maximum": 45000000000000000,
                    "type": "number",
                    "description": "Associated balance, in ADA"
                },
                "id": {
                    "type": "string",
                    "description": "Actual address"
                }
            }
        },
        "CWalletMeta": {
            "required": [
                "cwName",
                "cwAssurance",
                "cwUnit"
            ],
            "type": "object",
            "properties": {
                "cwUnit": {
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "type": "integer"
                },
                "cwName": {
                    "type": "string"
                },
                "cwAssurance": {
                    "$ref": "#/definitions/CWalletAssurance"
                }
            }
        },
        "AssuranceLevel": {
            "type": "string",
            "enum": [
                "normal",
                "strict"
            ]
        },
        "Account": {
            "required": [
                "index",
                "addresses",
                "amount",
                "name",
                "walletId"
            ],
            "type": "object",
            "properties": {
                "amount": {
                    "maximum": 45000000000000000,
                    "type": "number",
                    "description": "Available funds, in ADA"
                },
                "addresses": {
                    "items": {
                        "$ref": "#/definitions/V1Address"
                    },
                    "type": "array",
                    "description": "Public addresses pointing to this account"
                },
                "name": {
                    "type": "string",
                    "description": "Account's name"
                },
                "walletId": {
                    "type": "string",
                    "description": "Id of the wallet this account belongs to"
                },
                "index": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "integer",
                    "description": "Account's index in the wallet, starting at 0"
                }
            }
        },
        "V1Address": {
            "type": "string"
        },
        "WalletResponse<Wallet>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "$ref": "#/definitions/Wallet"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "CWallet": {
            "required": [
                "cwId",
                "cwMeta",
                "cwAccountsNumber",
                "cwAmount",
                "cwHasPassphrase",
                "cwPassphraseLU"
            ],
            "type": "object",
            "properties": {
                "cwAmount": {
                    "$ref": "#/definitions/CCoin"
                },
                "cwHasPassphrase": {
                    "type": "boolean"
                },
                "cwAccountsNumber": {
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "type": "integer"
                },
                "cwPassphraseLU": {
                    "type": "integer"
                },
                "cwMeta": {
                    "$ref": "#/definitions/CWalletMeta"
                },
                "cwId": {
                    "$ref": "#/definitions/CId"
                }
            }
        },
        "Transaction": {
            "required": [
                "id",
                "confirmations",
                "amount",
                "inputs",
                "outputs",
                "type",
                "direction"
            ],
            "type": "object",
            "properties": {
                "amount": {
                    "maximum": 45000000000000000,
                    "type": "number",
                    "description": "Coins moved as part of the transaction, in ADA"
                },
                "inputs": {
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/PaymentDistribution"
                    },
                    "type": "array",
                    "description": "One or more input money distributions"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "outgoing",
                        "incoming"
                    ],
                    "description": "Direction for this transaction"
                },
                "outputs": {
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/PaymentDistribution"
                    },
                    "type": "array",
                    "description": "One or more ouputs money distributions"
                },
                "confirmations": {
                    "maximum": 1.8446744073709551615e19,
                    "minimum": 0,
                    "type": "integer",
                    "description": "Number of confirmations"
                },
                "id": {
                    "type": "string",
                    "description": "Transaction's id"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "local",
                        "foreign"
                    ],
                    "description": "Type of transaction"
                }
            }
        },
        "PerPage": {
            "maximum": 50,
            "default": 10,
            "minimum": 1,
            "type": "integer"
        },
        "WalletStateSnapshot": {
            "type": "string"
        },
        "CAccountMeta": {
            "required": [
                "caName"
            ],
            "type": "object",
            "properties": {
                "caName": {
                    "type": "string"
                }
            }
        },
        "CAccountId": {
            "type": "string"
        },
        "LocalTimeDifference": {
            "required": [
                "quantity"
            ],
            "type": "object",
            "properties": {
                "quantity": {
                    "type": "number"
                },
                "unit": {
                    "pattern": "microseconds",
                    "type": "string"
                }
            }
        },
        "CTx": {
            "required": [
                "ctId",
                "ctAmount",
                "ctConfirmations",
                "ctMeta",
                "ctInputs",
                "ctOutputs",
                "ctIsLocal",
                "ctIsOutgoing",
                "ctCondition"
            ],
            "type": "object",
            "properties": {
                "ctId": {
                    "$ref": "#/definitions/CTxId"
                },
                "ctMeta": {
                    "$ref": "#/definitions/CTxMeta"
                },
                "ctIsOutgoing": {
                    "type": "boolean"
                },
                "ctCondition": {
                    "$ref": "#/definitions/CPtxCondition"
                },
                "ctInputs": {
                    "items": {
                        "minItems": 2,
                        "items": [
                            {
                                "$ref": "#/definitions/CId"
                            },
                            {
                                "$ref": "#/definitions/CCoin"
                            }
                        ],
                        "maxItems": 2,
                        "type": "array"
                    },
                    "type": "array"
                },
                "ctIsLocal": {
                    "type": "boolean"
                },
                "ctConfirmations": {
                    "maximum": 1.8446744073709551615e19,
                    "minimum": 0,
                    "type": "integer"
                },
                "ctAmount": {
                    "$ref": "#/definitions/CCoin"
                },
                "ctOutputs": {
                    "items": {
                        "minItems": 2,
                        "items": [
                            {
                                "$ref": "#/definitions/CId"
                            },
                            {
                                "$ref": "#/definitions/CCoin"
                            }
                        ],
                        "maxItems": 2,
                        "type": "array"
                    },
                    "type": "array"
                }
            }
        },
        "PaymentSource": {
            "required": [
                "walletId",
                "accountIndex"
            ],
            "type": "object",
            "properties": {
                "accountIndex": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "integer",
                    "description": "Corresponding account's index on the wallet"
                },
                "walletId": {
                    "type": "string",
                    "description": "Target wallet identifier to reach"
                }
            }
        },
        "ClientInfo": {
            "required": [
                "ciApiVersion",
                "ciSoftwareVersion",
                "ciCabalVersion",
                "ciGitRevision"
            ],
            "type": "object",
            "properties": {
                "ciSoftwareVersion": {
                    "$ref": "#/definitions/SoftwareVersion"
                },
                "ciCabalVersion": {
                    "$ref": "#/definitions/Version"
                },
                "ciApiVersion": {
                    "$ref": "#/definitions/ApiVersion"
                },
                "ciGitRevision": {
                    "type": "string"
                }
            }
        },
        "EstimatedFees": {
            "required": [
                "estimatedAmount"
            ],
            "type": "object",
            "properties": {
                "estimatedAmount": {
                    "maximum": 45000000000000000,
                    "type": "number",
                    "description": "Estimated fees, in ADA"
                }
            }
        },
        "CInitialized": {
            "required": [
                "cTotalTime",
                "cPreInit"
            ],
            "type": "object",
            "properties": {
                "cTotalTime": {
                    "maximum": 1.8446744073709551615e19,
                    "minimum": 0,
                    "type": "integer"
                },
                "cPreInit": {
                    "maximum": 1.8446744073709551615e19,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "WalletOperation": {
            "type": "string",
            "enum": [
                "create",
                "restore"
            ]
        },
        "BlockCount": {
            "required": [
                "getBlockCount"
            ],
            "type": "object",
            "properties": {
                "getBlockCount": {
                    "maximum": 1.8446744073709551615e19,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "SlotDuration": {
            "required": [
                "quantity"
            ],
            "type": "object",
            "properties": {
                "quantity": {
                    "type": "number"
                },
                "unit": {
                    "pattern": "milliseconds",
                    "type": "string"
                }
            }
        },
        "NewBatchPayment": {
            "example": {
                "to": [
                    {
                        "amount": 228,
                        "address": "<address>"
                    },
                    {
                        "amount": 701,
                        "address": "<address>"
                    }
                ],
                "from": "<walletId@accountId>",
                "policy": {
                    "groupingPolicy": "OptimizeForSecurity"
                }
            },
            "required": [
                "to",
                "from",
                "policy"
            ],
            "type": "object",
            "properties": {
                "to": {
                    "items": {
                        "required": [
                            "amount",
                            "address"
                        ],
                        "type": "object",
                        "properties": {
                            "amount": {
                                "type": "number"
                            },
                            "address": {
                                "type": "string"
                            }
                        }
                    },
                    "type": "array"
                },
                "from": {
                    "type": "string"
                },
                "policy": {
                    "required": [
                        "groupingPolicy"
                    ],
                    "type": "object",
                    "properties": {
                        "groupingPolicy": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "WalletResponse<AddressValidity>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "$ref": "#/definitions/AddressValidity"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "Version": {
            "type": "string"
        },
        "WalletId": {
            "type": "string"
        },
        "CWalletRedeem": {
            "required": [
                "crWalletId",
                "crSeed"
            ],
            "type": "object",
            "properties": {
                "crWalletId": {
                    "$ref": "#/definitions/CAccountId"
                },
                "crSeed": {
                    "type": "string"
                }
            }
        },
        "SyncProgress": {
            "required": [
                "quantity"
            ],
            "type": "object",
            "properties": {
                "quantity": {
                    "maximum": 100,
                    "minimum": 0,
                    "type": "number"
                },
                "unit": {
                    "pattern": "percent",
                    "type": "string"
                }
            }
        },
        "CAddress": {
            "required": [
                "cadId",
                "cadAmount",
                "cadIsUsed",
                "cadIsChange"
            ],
            "type": "object",
            "properties": {
                "cadId": {
                    "$ref": "#/definitions/CId"
                },
                "cadIsUsed": {
                    "type": "boolean"
                },
                "cadIsChange": {
                    "type": "boolean"
                },
                "cadAmount": {
                    "$ref": "#/definitions/CCoin"
                }
            }
        },
        "ApplicationName": {
            "required": [
                "getApplicationName"
            ],
            "type": "object",
            "properties": {
                "getApplicationName": {
                    "type": "string"
                }
            }
        },
        "SoftwareVersion": {
            "required": [
                "svAppName",
                "svNumber"
            ],
            "type": "object",
            "properties": {
                "svAppName": {
                    "$ref": "#/definitions/ApplicationName"
                },
                "svNumber": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "Metadata": {
            "required": [
                "pagination"
            ],
            "type": "object",
            "properties": {
                "pagination": {
                    "$ref": "#/definitions/PaginationMetadata"
                }
            }
        },
        "CPaperVendWalletRedeem": {
            "required": [
                "pvWalletId",
                "pvSeed",
                "pvBackupPhrase"
            ],
            "type": "object",
            "properties": {
                "pvBackupPhrase": {
                    "$ref": "#/definitions/BackupPhrase"
                },
                "pvSeed": {
                    "type": "string"
                },
                "pvWalletId": {
                    "$ref": "#/definitions/CAccountId"
                }
            }
        },
        "NewAccount": {
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Account's name"
                },
                "spendingPassword": {
                    "pattern": "abcd",
                    "type": "string",
                    "description": "Optional spending password to unlock funds"
                }
            }
        },
        "AccountUpdate": {
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "New account's name"
                }
            }
        },
        "WalletResponse<NodeInfo>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "$ref": "#/definitions/NodeInfo"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "CCoin": {
            "required": [
                "getCCoin"
            ],
            "type": "object",
            "properties": {
                "getCCoin": {
                    "type": "string"
                }
            }
        },
        "NewWallet": {
            "required": [
                "backupPhrase",
                "assuranceLevel",
                "name",
                "operation"
            ],
            "type": "object",
            "properties": {
                "operation": {
                    "type": "string",
                    "enum": [
                        "create",
                        "restore"
                    ],
                    "description": "Create a new wallet or Restore an existing one"
                },
                "backupPhrase": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Backup phrase to restore the wallet"
                },
                "assuranceLevel": {
                    "type": "string",
                    "enum": [
                        "normal",
                        "strict"
                    ],
                    "description": "Desired assurance level"
                },
                "name": {
                    "type": "string",
                    "description": "Wallet's name"
                },
                "spendingPassword": {
                    "pattern": "abcd",
                    "type": "string",
                    "description": "Optional spending password to encrypt / decrypt private keys"
                }
            }
        },
        "PasswordUpdate": {
            "required": [
                "old",
                "new"
            ],
            "type": "object",
            "properties": {
                "old": {
                    "pattern": "abcd",
                    "type": "string",
                    "description": "Old password"
                },
                "new": {
                    "pattern": "abcd",
                    "type": "string",
                    "description": "New passowrd"
                }
            }
        },
        "ChainDifficulty": {
            "required": [
                "getChainDifficulty"
            ],
            "type": "object",
            "properties": {
                "getChainDifficulty": {
                    "$ref": "#/definitions/BlockCount"
                }
            }
        },
        "CId": {
            "type": "string"
        },
        "NodeInfo": {
            "required": [
                "syncProgress",
                "localBlockchainHeight",
                "localTimeDifference"
            ],
            "type": "object",
            "properties": {
                "blockchainHeight": {
                    "$ref": "#/definitions/BlockchainHeight"
                },
                "localTimeDifference": {
                    "$ref": "#/definitions/LocalTimeDifference"
                },
                "syncProgress": {
                    "$ref": "#/definitions/SyncProgress"
                },
                "localBlockchainHeight": {
                    "$ref": "#/definitions/BlockchainHeight"
                }
            }
        },
        "WalletResponse<[Address]>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "items": {
                        "$ref": "#/definitions/Address"
                    },
                    "type": "array"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "WalletResponse<[Account]>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "items": {
                        "$ref": "#/definitions/Account"
                    },
                    "type": "array"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        },
        "V1InputSelectionPolicy": {
            "type": "string",
            "enum": [
                "OptimizeForSecurity",
                "OptimizeForHighThroughput"
            ]
        },
        "PaginationMetadata": {
            "required": [
                "totalPages",
                "page",
                "perPage",
                "totalEntries"
            ],
            "type": "object",
            "properties": {
                "page": {
                    "$ref": "#/definitions/Page"
                },
                "perPage": {
                    "$ref": "#/definitions/PerPage"
                },
                "totalPages": {
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "type": "integer"
                },
                "totalEntries": {
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "type": "integer"
                }
            }
        },
        "TransactionDirection": {
            "type": "string",
            "enum": [
                "outgoing",
                "incoming"
            ]
        },
        "WalletResponse<EstimatedFees>": {
            "required": [
                "data",
                "status",
                "meta"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/ResponseStatus"
                },
                "data": {
                    "$ref": "#/definitions/EstimatedFees"
                },
                "meta": {
                    "$ref": "#/definitions/Metadata"
                }
            }
        }
    },
    "paths": {
        "/api/v1/wallets/{walletId}/accounts/{accountIndex}": {
            "get": {
                "summary": "Retrieves a specific Account.",
                "responses": {
                    "404": {
                        "description": "`walletId` or `accountIndex` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<Account>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "maximum": 4294967295,
                        "minimum": 0,
                        "required": true,
                        "in": "path",
                        "name": "accountIndex",
                        "type": "integer"
                    }
                ],
                "tags": [
                    "Accounts"
                ]
            },
            "delete": {
                "summary": "Deletes an Account.",
                "responses": {
                    "404": {
                        "description": "`walletId` or `accountIndex` not found"
                    },
                    "204": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "maximum": 4294967295,
                        "minimum": 0,
                        "required": true,
                        "in": "path",
                        "name": "accountIndex",
                        "type": "integer"
                    }
                ],
                "tags": [
                    "Accounts"
                ]
            },
            "put": {
                "summary": "Update an Account for the given Wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` or `accountIndex` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<Account>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "maximum": 4294967295,
                        "minimum": 0,
                        "required": true,
                        "in": "path",
                        "name": "accountIndex",
                        "type": "integer"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccountUpdate"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Accounts"
                ]
            }
        },
        "/api/backup/import": {
            "post": {
                "summary": "Import full information about wallet from a given file.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FilePath"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/txs/pending/summary": {
            "get": {
                "summary": "Get the pending tx summaries.",
                "responses": {
                    "200": {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PendingTxsSummary"
                            },
                            "type": "array"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/wallets/password/{walletId}": {
            "post": {
                "summary": "Change passphrase of given wallet.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `new` or `old`"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "old",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "new",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/addresses/{address}": {
            "get": {
                "summary": "Returns True if given address is valid, False otherwise.",
                "responses": {
                    "404": {
                        "description": "`address` not found"
                    },
                    "200": {
                        "schema": {
                            "type": "boolean"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "address",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/accounts/{accountId}": {
            "get": {
                "summary": "Get information about a account by its ID",
                "responses": {
                    "404": {
                        "description": "`accountId` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAccount"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            },
            "delete": {
                "summary": "Delete an account by ID.",
                "responses": {
                    "404": {
                        "description": "`accountId` not found"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            },
            "put": {
                "summary": "Update account's meta information.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`accountId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAccount"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CAccountMeta"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/redemptions/ada": {
            "post": {
                "summary": "Redeem ADA.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CTx"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletRedeem"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/settings/sync/progress": {
            "get": {
                "summary": "Current sync progress",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/SyncProgress"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "description": "Fetch info about local chain difficulty, network chain difficulty and connected peers.",
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/wallets/new": {
            "post": {
                "summary": "Create a new wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletInit"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/v1/wallets/{walletId}": {
            "get": {
                "summary": "Returns the Wallet identified by the given walletId.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<Wallet>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "Wallets"
                ]
            },
            "delete": {
                "summary": "Deletes the given Wallet and all its accounts.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "204": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "Wallets"
                ]
            },
            "put": {
                "summary": "Update the Wallet identified by the given walletId.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<Wallet>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WalletUpdate"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Wallets"
                ]
            }
        },
        "/api/settings/time/difference": {
            "get": {
                "summary": "Get local time difference in microseconds.",
                "responses": {
                    "200": {
                        "schema": {
                            "type": "integer"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/wallets/{walletId}": {
            "get": {
                "summary": "Get information about a wallet by its ID (address).",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            },
            "delete": {
                "summary": "Delete given wallet with all contained accounts.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            },
            "put": {
                "summary": "Update wallet's meta information.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletMeta"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/v1/wallets/{walletId}/accounts": {
            "post": {
                "summary": "Creates a new Account for the given Wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<Account>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewAccount"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Accounts"
                ]
            },
            "get": {
                "summary": "Retrieves the full list of Accounts.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `per_page` or `page`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<[Account]>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 50,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **50**. If nothing is specified, **this value defaults to 10**.\n"
                    }
                ],
                "tags": [
                    "Accounts"
                ]
            }
        },
        "/api/v1/updates": {
            "post": {
                "summary": "Applies the update. Returns info about the update being applied.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<WalletUpdate>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "Updates"
                ]
            }
        },
        "/api/txs/resubmission/reset": {
            "get": {
                "summary": "Clear the 'do not resubmit' flag from transactions that have it.",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "description": "For all transactions in CPtxWontApply condition, reset them to CPtxApplying condition so that they will be passed to resubmition",
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/settings/version": {
            "get": {
                "summary": "Get current version of the node.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/SoftwareVersion"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/development/dump-wallet-state": {
            "get": {
                "summary": "Dump wallet state.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<WalletStateSnapshot>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Development"
                ]
            }
        },
        "/api/development/secret-keys": {
            "delete": {
                "summary": "Clear wallet state and delete all the secret keys.",
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "Development"
                ]
            }
        },
        "/api/txs/resubmission/cancel": {
            "post": {
                "summary": "Cancel all transactions in CPtxApplying condition (unconfirmed).",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/info": {
            "get": {
                "summary": "Get general information about this service.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/ClientInfo"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/txs/fee/{from}/{to}/{amount}": {
            "post": {
                "summary": "Estimate fees for performing given transaction.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`from` or `to` or `amount` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CCoin"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "from",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "to",
                        "type": "string"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "required": true,
                        "in": "path",
                        "name": "amount",
                        "type": "integer"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InputSelectionPolicy"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "description": "Evaluate fee which would be used for transaction created with given parameters. Note that fee may change on any operation on wallet occurs. Transaction will not be actually created.",
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/backup/export/{walletId}": {
            "post": {
                "summary": "Export full information about wallet to a given file",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FilePath"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "description": "Wallet may be later restored from this file with  endpoint above.",
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/update": {
            "get": {
                "summary": "Get information about the next update.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CUpdateInfo"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/txs/payments/{from}/{to}/{amount}": {
            "post": {
                "summary": "Create a new payment transaction.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`from` or `to` or `amount` not found"
                    },
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CTx"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "required": true,
                        "in": "path",
                        "name": "from",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "to",
                        "type": "string"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "required": true,
                        "in": "path",
                        "name": "amount",
                        "type": "integer"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InputSelectionPolicy"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/txs/histories": {
            "get": {
                "summary": "Get the history of transactions.",
                "responses": {
                    "400": {
                        "description": "Invalid `limit` or `skip` or `address` or `accountId` or `walletId`"
                    },
                    "200": {
                        "schema": {
                            "minItems": 2,
                            "items": [
                                {
                                    "items": {
                                        "$ref": "#/definitions/CTx"
                                    },
                                    "type": "array"
                                },
                                {
                                    "maximum": 1.8446744073709551615e19,
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            ],
                            "maxItems": 2,
                            "type": "array"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "format": "walletSetAddress@walletKeyIndex",
                        "in": "query",
                        "name": "accountId",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "address",
                        "type": "string"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "in": "query",
                        "name": "skip",
                        "type": "integer"
                    },
                    {
                        "maximum": 1.8446744073709551615e19,
                        "minimum": 0,
                        "in": "query",
                        "name": "limit",
                        "type": "integer"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/v1/wallets": {
            "post": {
                "summary": "Creates a new or restores an existing Wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<Wallet>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewWallet"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Wallets"
                ]
            },
            "get": {
                "summary": "Returns all the available wallets.",
                "responses": {
                    "400": {
                        "description": "Invalid `per_page` or `page`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<[Wallet]>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 50,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **50**. If nothing is specified, **this value defaults to 10**.\n"
                    },
                    {
                        "in": "query",
                        "name": "wallet_id",
                        "type": "string",
                        "description": "A **FILTER** operation on a Wallet."
                    },
                    {
                        "in": "query",
                        "name": "balance",
                        "type": "string",
                        "description": "A **FILTER** operation on a Wallet."
                    },
                    {
                        "required": false,
                        "in": "query",
                        "name": "sort_by",
                        "allowEmptyValue": true,
                        "type": "string",
                        "description": "A **SORT** operation on this Wallet. Allowed keys: `balance`.\n"
                    }
                ],
                "tags": [
                    "Wallets"
                ]
            }
        },
        "/api/test/reset": {
            "post": {
                "summary": "Clear wallet state and remove all secret key.",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/v1/transactions/{walletId}": {
            "get": {
                "summary": "Returns the transaction history, i.e the list of all the past transactions.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `per_page` or `page` or `address` or `account_index`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<[Transaction]>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "maximum": 4294967295,
                        "minimum": 0,
                        "in": "query",
                        "name": "account_index",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "address",
                        "type": "string"
                    },
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 50,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **50**. If nothing is specified, **this value defaults to 10**.\n"
                    }
                ],
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/api/wallets": {
            "get": {
                "summary": "Get information about all available wallets.",
                "responses": {
                    "200": {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CWallet"
                            },
                            "type": "array"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/settings/slots/duration": {
            "get": {
                "summary": "Get blockchain slot duration in milliseconds.",
                "responses": {
                    "200": {
                        "schema": {
                            "maximum": 1.8446744073709551615e19,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/v1/wallets/{walletId}/password": {
            "put": {
                "summary": "Updates the password for the given Wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<Wallet>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordUpdate"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Wallets"
                ]
            }
        },
        "/api/wallets/keys": {
            "post": {
                "summary": "Import user's secret key from the path to generate wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FilePath"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/v1/transactions": {
            "post": {
                "summary": "Generates a new transaction from the source to one or multiple target addresses.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<Transaction>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/api/papervend/redemptions/ada": {
            "post": {
                "summary": "Redeem ADA, paper vending.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CTx"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CPaperVendWalletRedeem"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/update/postpone": {
            "post": {
                "summary": "Postpone last update.",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/v1/addresses/{address}/validity": {
            "get": {
                "summary": "Checks the validity of an address.",
                "responses": {
                    "404": {
                        "description": "`address` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<AddressValidity>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "address",
                        "type": "string"
                    }
                ],
                "tags": [
                    "Addresses"
                ]
            }
        },
        "/api/txs/payments/batch": {
            "post": {
                "summary": "Create a new payment transaction (can send to multiple recipients).",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CTx"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewBatchPayment"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/v1/updates/next": {
            "get": {
                "summary": "Requests information about the next scheduled update.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<WalletUpdate>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "Updates"
                ]
            }
        },
        "/api/system/shutdown": {
            "post": {
                "summary": "Request a shutdown from node.",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/accounts": {
            "post": {
                "summary": "Create a new account in given wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAccount"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CAccountInit"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            },
            "get": {
                "summary": "Get information about all available accounts.",
                "responses": {
                    "400": {
                        "description": "Invalid `accountId`"
                    },
                    "200": {
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CAccount"
                            },
                            "type": "array"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "accountId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/update/apply": {
            "post": {
                "summary": "Apply last update.",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/v1/transactions/fees": {
            "post": {
                "summary": "Estimate the fees which would originate from the payment.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<EstimatedFees>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/api/reporting/initialized": {
            "post": {
                "summary": "Send node's report on initialization time.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CInitialized"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/v1/node-settings": {
            "get": {
                "summary": "Retrieves the static settings for this node.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<NodeSettings>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "Settings"
                ]
            }
        },
        "/api/v1/addresses": {
            "post": {
                "summary": "Creates a new Address.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<WalletAddress>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewAddress"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Addresses"
                ]
            },
            "get": {
                "summary": "Returns all the addresses.",
                "responses": {
                    "400": {
                        "description": "Invalid `per_page` or `page`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<[Address]>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 50,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **50**. If nothing is specified, **this value defaults to 10**.\n"
                    }
                ],
                "tags": [
                    "Addresses"
                ]
            }
        },
        "/api/addresses": {
            "post": {
                "summary": "Create a new address in given account.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CAddress"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CAccountId"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/wallets/restore": {
            "post": {
                "summary": "Restore existing wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body` or `passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CWallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CWalletInit"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/v1/node-info": {
            "get": {
                "summary": "Retrieves the dynamic information for this node.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletResponse<NodeInfo>"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "Info"
                ]
            }
        },
        "/api/profile": {
            "post": {
                "summary": "Update user profile.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CProfile"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CProfile"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            },
            "get": {
                "summary": "Get user profile's meta data.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CProfile"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/test/state": {
            "get": {
                "summary": "Print wallet state as JSON",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletStateSnapshot"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        },
        "/api/txs/resubmission/cancelsingle/{transaction}": {
            "post": {
                "summary": "Cancel specific transaction in CPtxApplying condition.",
                "responses": {
                    "404": {
                        "description": "`transaction` not found"
                    },
                    "200": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "transaction",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V0 (Deprecated)"
                ]
            }
        }
    }
}